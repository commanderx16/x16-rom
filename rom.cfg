MEMORY {
	# zero page
	#         start = $0000, size = $0080; # available to the user (or GEOS)
	ZPKERNAL: start = $0080, size = $000E; # KERNAL
	#         start = $008E, size = $0005; # reserved for KERNAL or CBDOS growth
	ZPCBDOS:  start = $0093, size = $0011; # CBDOS
	#         start = $00A4, size = $0005; # reserved for CBDOS or BASIC growth
	ZPBASIC:  start = $00A9, size = $0056; # BASIC (last byte used: $FE)
	
	# variables
	STRTMP:   start = $00FF, size = $0002; # BASIC
	STACK:    start = $0100, size = $0100; # KERNAL
	KVAR:     start = $0200, size = $00C2; # KERNAL
	#         start = $02C2, size = $000A; # reserved for KERNAL or BASIC growth
	BVARS:    start = $02CC, size = $0034; # BASIC
	BVECTORS: start = $0300, size = $0013; # BASIC
	KVECTORS: start = $0314, size = $005D; # KERNAL
	KERNRAM:  start = $0372, size = $018E; # KERNAL

	# MONITOR
	L0220:    start = $0220, size = $0060;

	# CBDOS
	CBDOSDAT: start = $A000, size = $2000;

	# GEOS
	VARS:     start = $86C0, size = $0940;
	RAM:      start = $9800, size = $0700;
	DRV:      start = $9000, size = $0D80;


	# Bank 0 (CHARSET, MONITOR, KERNAL)
	KERNAL:   start = $C000, size = $3F00, fill=yes, fillval=$AA;
	JMPTBL2:  start = $FF00, size = $0047, fill=yes, fillval=$AA;
	JMPTB128: start = $FF47, size = $0039, fill=yes, fillval=$AA;
	JMPTBL:   start = $FF80, size = $007A, fill=yes, fillval=$AA;
	VECTORS:  start = $FFFA, size = $0006, fill=yes, fillval=$AA;

	# Bank 1 (KEYMAPS)
	KEYMAPS:  start = $C000, size = $3FFE, fill=yes, fillval=$AA;
	IRQA:     start = $FFFE, size = $0002, fill=yes, fillval=$AA;

	# Bank 2 (CBDOS)
	CBDOS:    start = $C000, size = $3FFE, fill=yes, fillval=$AA;
	IRQB:     start = $FFFE, size = $0002, fill=yes, fillval=$AA;

	# Bank 3 (GEOS)
	LOKERNAL:     start = $C000, size = $0100, fill=yes, fillval=$AA;
	GKERNAL:      start = $C100, size = $3EFA, fill=yes, fillval=$AA;
	GVECTORS:     start = $FFFA, size = $0006, fill=yes, fillval=$AA;

	# Bank 4 (BASIC)
	BASIC:     start = $C000, size = $3D80, fill=yes, fillval=$AA;
	KERNSUP:   start = $FD80, size = $0180, fill=yes, fillval=$AA;
	KERNSUPV3: start = $FF00, size = $0047, fill=yes, fillval=$AA;
	KERNSUPV2: start = $FF47, size = $0039, fill=yes, fillval=$AA;
	KERNSUPV:  start = $FF80, size = $0080, fill=yes, fillval=$AA;

	# Bank 5 (empty)
	BANK1:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 6 (empty)
	BANK2:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 7 (empty)
	BANK3:    start = $C000, size = $4000, fill=yes, fillval=$AA;
}

SEGMENTS {
	# BASIC
	ZPBASIC:  load = ZPBASIC,  type = zp;
	STRTMP:   load = STRTMP,   type = zp;
	BVECTORS: load = BVECTORS, type = bss;
	BVARS:    load = BVARS,    type = bss;

	# KERNAL
	ZPKERNAL: load = ZPKERNAL, type = zp;
	STACK:    load = STACK,    type = bss;
	KVAR:     load = KVAR,     type = bss;
	KVECTORS: load = KVECTORS, type = bss;
	
	# GEOS
	vars:     load = VARS,     type = bss;
	

	# Bank 0 (BASIC)
	BASIC:     load = BASIC,     type = ro;
	KERNSUP:   load = KERNSUP,   type = ro;
	KERNSUPV3: load = KERNSUPV3, type = ro;
	KERNSUPV2: load = KERNSUPV2, type = ro;
	KERNSUPV:  load = KERNSUPV,  type = ro;

	# Bank 4 (GEOS)
	header:             load = LOKERNAL, type = ro;
	tobasic2:           load = LOKERNAL, type = ro;
	mainloop1:          load = LOKERNAL, type = ro;
	files2:             load = LOKERNAL, type = ro;
	memory2:            load = LOKERNAL, type = ro;
	jumptab:            load = GKERNAL, type = ro;
	start:              load = GKERNAL, type = ro;
	ramexp1:            load = GKERNAL, type = ro;
	files1a2a:          load = GKERNAL, type = ro;
	files1a2b:          load = GKERNAL, type = ro;
	files1b:            load = GKERNAL, type = ro;
	serial1:            load = GKERNAL, type = ro;
	reu:                load = GKERNAL, type = ro;
	ramexp2:            load = GKERNAL, type = ro;
	tobasic1:           load = GKERNAL, type = ro;
	mouseptr:           load = GKERNAL, type = ro;
	dlgbox2:            load = GKERNAL, type = ro;
	mainloop3:          load = GKERNAL, type = ro;
	bitmask1:           load = GKERNAL, type = ro;
	bitmask2:           load = GKERNAL, type = ro;
	bitmask3:           load = GKERNAL, type = ro;
	files3:             load = GKERNAL, type = ro;
	mainloop2:          load = GKERNAL, type = ro;
	load1a:             load = GKERNAL, type = ro;
	load1b:             load = GKERNAL, type = ro;
	load1c:             load = GKERNAL, type = ro;
	load1d:             load = GKERNAL, type = ro;
	init1:              load = GKERNAL, type = ro;
	hw1a:               load = GKERNAL, type = ro;
	hw1b:               load = GKERNAL, type = ro;
	graph1:             load = GKERNAL, type = ro;
	hw2:                load = GKERNAL, type = ro;
	init2:              load = GKERNAL, type = ro;
	memory1a:           load = GKERNAL, type = ro;
	memory1b:           load = GKERNAL, type = ro;
	misc:               load = GKERNAL, type = ro;
	hw3:                load = GKERNAL, type = ro;
	load2:              load = GKERNAL, type = ro;
	graph2a:            load = GKERNAL, type = ro;
	graph2b:            load = GKERNAL, type = ro;
	graph2c:            load = GKERNAL, type = ro;
	graph2d:            load = GKERNAL, type = ro;
	graph2e:            load = GKERNAL, type = ro;
	graph2f:            load = GKERNAL, type = ro;
	graph2g:            load = GKERNAL, type = ro;
	graph2h:            load = GKERNAL, type = ro;
	graph2i1:           load = GKERNAL, type = ro;
	inline:             load = GKERNAL, type = ro;
	graph2j:            load = GKERNAL, type = ro;
	graph2k:            load = GKERNAL, type = ro;
	graph2l1:           load = GKERNAL, type = ro;
	graph2l2:           load = GKERNAL, type = ro;
	graph2m:            load = GKERNAL, type = ro;
	graph2n:            load = GKERNAL, type = ro;
	graph2o:            load = GKERNAL, type = ro;
	process1:           load = GKERNAL, type = ro;
	process2:           load = GKERNAL, type = ro;
	process3a:          load = GKERNAL, type = ro;
	process3aa:         load = GKERNAL, type = ro;
	process3b:          load = GKERNAL, type = ro;
	process3c:          load = GKERNAL, type = ro;
	sprites:            load = GKERNAL, type = ro;
	math1a1:            load = GKERNAL, type = ro;
	math1a2:            load = GKERNAL, type = ro;
	math1b:             load = GKERNAL, type = ro;
	math1c1:            load = GKERNAL, type = ro;
	math1c2:            load = GKERNAL, type = ro;
	math1d:             load = GKERNAL, type = ro;
	mouse1:             load = GKERNAL, type = ro;
	panic1:             load = GKERNAL, type = ro;
	panic2:             load = GKERNAL, type = ro;
	panic3:             load = GKERNAL, type = ro;
	serial2:            load = GKERNAL, type = ro;
	patterns:           load = GKERNAL, type = ro;
	fonts1:             load = GKERNAL, type = ro;
	bswfont:            load = GKERNAL, type = ro;
	memory3:            load = GKERNAL, type = ro;
	load3:              load = GKERNAL, type = ro;
	files6a:            load = GKERNAL, type = ro;
	files6b:            load = GKERNAL, type = ro;
	files6c:            load = GKERNAL, type = ro;
	deskacc1:           load = GKERNAL, type = ro;
	load4b:             load = GKERNAL, type = ro;
	deskacc2:           load = GKERNAL, type = ro;
	files7:             load = GKERNAL, type = ro;
	deskacc3:           load = GKERNAL, type = ro;
	files8:             load = GKERNAL, type = ro;
	files9:             load = GKERNAL, type = ro;
	files10:            load = GKERNAL, type = ro;
	init4:              load = GKERNAL, type = ro;
	fonts2:             load = GKERNAL, type = ro;
	fonts3:             load = GKERNAL, type = ro;
	fonts4:             load = GKERNAL, type = ro;
	fonts4a:            load = GKERNAL, type = ro;
	fonts4b:            load = GKERNAL, type = ro;
	init3:              load = GKERNAL, type = ro;
	graph3a:            load = GKERNAL, type = ro;
	graph3b:            load = GKERNAL, type = ro;
	graph3c:            load = GKERNAL, type = ro;
	conio1:             load = GKERNAL, type = ro;
	conio2:             load = GKERNAL, type = ro;
	conio3a:            load = GKERNAL, type = ro;
	conio3b:            load = GKERNAL, type = ro;
	conio4:             load = GKERNAL, type = ro;
	conio5:             load = GKERNAL, type = ro;
	conio6:             load = GKERNAL, type = ro;
	math2:              load = GKERNAL, type = ro;
	graph4:             load = GKERNAL, type = ro;
	mouse2:             load = GKERNAL, type = ro;
	menu1:              load = GKERNAL, type = ro;
	menu2:              load = GKERNAL, type = ro;
	menu3:              load = GKERNAL, type = ro;
	icon1:              load = GKERNAL, type = ro;
	mouse3:             load = GKERNAL, type = ro;
	icon2:              load = GKERNAL, type = ro;
	dlgbox1a:           load = GKERNAL, type = ro;
	dlgbox1b:           load = GKERNAL, type = ro;
	dlgbox1c:           load = GKERNAL, type = ro;
	dlgbox1d:           load = GKERNAL, type = ro;
	dlgbox1e1:          load = GKERNAL, type = ro;
	dlgbox1e2:          load = GKERNAL, type = ro;
	dlgbox1f:           load = GKERNAL, type = ro;
	dlgbox1g:           load = GKERNAL, type = ro;
	dlgbox1h:           load = GKERNAL, type = ro;
	dlgbox1i:           load = GKERNAL, type = ro;
	dlgbox1j:           load = GKERNAL, type = ro;
	dlgbox1k:           load = GKERNAL, type = ro;
	mouse4:             load = GKERNAL, type = ro;
	irq:                load = GKERNAL, type = ro;
	keyboard1:          load = GKERNAL, type = ro;
	keyboard2:          load = GKERNAL, type = ro;
	keyboard3:          load = GKERNAL, type = ro;
	time1:              load = GKERNAL, type = ro;
	time2:              load = GKERNAL, type = ro;
	RAM:                load = GKERNAL, run = RAM, type = ro, define = yes;
	drvcbdos:           load = GKERNAL, run = DRV, type = ro, define = yes;
	entry:              load = GKERNAL, type = ro;
	vectors:            load = GVECTORS, type = ro;

	# Bank 5 (CBDOS)
	ZPCBDOS:    load = ZPCBDOS,  type = zp;
	cbdos:      load = CBDOS,    type = ro;
	CODE:       load = CBDOS,    type = ro;
	cbdos_data: load = CBDOSDAT, type = bss;
	IRQB:       load = IRQB,     type = ro;

	# Bank 6 (KEYMAPS)
	KBDMETA:    load = KEYMAPS,  type = ro;
	KBDTABLES:  load = KEYMAPS,  type = ro;
	IKBDMETA:   load = KEYMAPS,  type = ro;
	IKBDTABLES: load = KEYMAPS,  type = ro;
	IRQA:       load = IRQA,     type = ro;

	# Bank 7 (CHARSET, MONITOR, KERNAL)
	# CHARSET
	CHARSET:    load = KERNAL,    type = ro;
	CHARISO:    load = KERNAL,    type = ro;
	# MONITOR
	monitor_a:        load = KERNAL, type = ro;
	monitor_b:        load = KERNAL, type = ro;
	asmchars1:        load = KERNAL, type = ro, define = yes;
	asmchars2:        load = KERNAL, type = ro, define = yes;
	mnemos1:          load = KERNAL, type = ro, define = yes;
	mnemos2:          load = KERNAL, type = ro, define = yes;
	monitor_c:        load = KERNAL, type = ro;
	monitor_ram_code: load = KERNAL, run = L0220, type = ro, define = yes;
	# KERNAL
	EDITOR:   load = KERNAL,   type = ro;
	SERIAL:   load = KERNAL,   type = ro;
	RS232:    load = KERNAL,   type = ro;
	MESSAGES: load = KERNAL,   type = ro;
	CHANNEL:  load = KERNAL,   type = ro;
	TIME:     load = KERNAL,   type = ro;
	ERROR:    load = KERNAL,   type = ro;
	INIT:     load = KERNAL,   type = ro;
	RS232NMI: load = KERNAL,   type = ro;
	IRQFILE:  load = KERNAL,   type = ro;
	ROUTINES: load = KERNAL,   type = ro;
	KERNRAM:  load = KERNAL,   run = KERNRAM, type = ro, define = yes;
	JMPTBL2:  load = JMPTBL2,  type = ro;
	JMPTB128: load = JMPTB128, type = ro;
	JMPTBL:   load = JMPTBL,   type = ro;
	VECTORS:  load = VECTORS,  type = ro;
}
