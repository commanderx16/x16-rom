MEMORY {
	# BASIC
	ZPBASIC:  start = $0000, size = $0090;
	STRTMP:   start = $00FF, size = $0002;
	BVECTORS: start = $0300, size = $0013;

	# KERNAL
	ZPKERNAL: start = $0090, size = $0070;
	STACK:    start = $0100, size = $0100;
	KVAR:     start = $0200, size = $0100;
	KVECTORS: start = $0314, size = $005E;
	KERNRAM:  start = $0372, size = $018E;

	# MONITOR
	L0220:    start = $0220, size = $0060;

	# CBDOS
	CBDOSDAT: start = $A000, size = $2000;


	# Bank 0 (BASIC)
	BASIC:    start = $C000, size = $3E00, fill=yes, fillval=$AA;
	KERNSUP:  start = $FE00, size = $0180, fill=yes, fillval=$AA;
	KERNSUPV: start = $FF80, size = $0080, fill=yes, fillval=$AA;

	# Bank 1 (empty)
	BANK1:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 2 (empty)
	BANK2:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 3 (empty)
	BANK3:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 4 (empty)
	BANK4:    start = $C000, size = $4000, fill=yes, fillval=$AA;

	# Bank 5 (CBDOS)
	CBDOS:    start = $C000, size = $3FFE, fill=yes, fillval=$AA;
	IRQ5:     start = $3FFE, size = $0002, fill=yes, fillval=$AA;

	# Bank 6 (KEYMAPS)
	KEYMAPS:  start = $C000, size = $3FFE, fill=yes, fillval=$AA;
	IRQ6:     start = $3FFE, size = $0002, fill=yes, fillval=$AA;

	# Bank 7 (CHARSET, MONITOR, KERNAL)
	KERNAL:   start = $C000, size = $3F00, fill=yes, fillval=$AA;
	JMPTBL2:  start = $FF00, size = $0047, fill=yes, fillval=$AA;
	JMPTB128: start = $FF47, size = $0039, fill=yes, fillval=$AA;
	JMPTBL:   start = $FF80, size = $007A, fill=yes, fillval=$AA;
	VECTORS:  start = $FFFA, size = $0006, fill=yes, fillval=$AA;
}

SEGMENTS {
	ZPBASIC:  load = ZPBASIC,  type = zp;
	STRTMP:   load = STRTMP,   type = zp;
	BVECTORS: load = BVECTORS, type = bss;

	ZPKERNAL: load = ZPKERNAL, type = zp;
	STACK:    load = STACK,    type = bss;
	KVAR:     load = KVAR,     type = bss;
	KVECTORS: load = KVECTORS, type = bss;

	# Bank 0 (BASIC)
	BASIC:    load = BASIC,    type = ro;
	KERNSUP:  load = KERNSUP,  type = ro;
	KERNSUPV: load = KERNSUPV, type = ro;

	# Bank 5 (CBDOS)
	cbdos:      load = CBDOS,    type = ro;
	CODE:       load = CBDOS,    type = ro;
	cbdos_data: load = CBDOSDAT, type = bss;
	IRQ5:       load = IRQ5,     type = ro;

	# Bank 6 (KEYMAPS)
	KBDMETA:    load = KEYMAPS,  type = ro;
	KBDTABLES:  load = KEYMAPS,  type = ro;
	IKBDMETA:   load = KEYMAPS,  type = ro;
	IKBDTABLES: load = KEYMAPS,  type = ro;
	IRQ6:       load = IRQ6,     type = ro;

	# Bank 7 (CHARSET, MONITOR, KERNAL)
	# CHARSET
	CHARSET:    load = KERNAL,    type = ro;
	CHARISO:    load = KERNAL,    type = ro;
	# MONITOR
	monitor_a:        load = KERNAL, type = ro;
	monitor_b:        load = KERNAL, type = ro;
	asmchars1:        load = KERNAL, type = ro, define = yes;
	asmchars2:        load = KERNAL, type = ro, define = yes;
	mnemos1:          load = KERNAL, type = ro, define = yes;
	mnemos2:          load = KERNAL, type = ro, define = yes;
	monitor_c:        load = KERNAL, type = ro;
	monitor_ram_code: load = KERNAL, run = L0220, type = ro, define = yes;
	# KERNAL
	EDITOR:   load = KERNAL,   type = ro;
	SERIAL:   load = KERNAL,   type = ro;
	RS232:    load = KERNAL,   type = ro;
	MESSAGES: load = KERNAL,   type = ro;
	CHANNEL:  load = KERNAL,   type = ro;
	TIME:     load = KERNAL,   type = ro;
	ERROR:    load = KERNAL,   type = ro;
	INIT:     load = KERNAL,   type = ro;
	RS232NMI: load = KERNAL,   type = ro;
	IRQFILE:  load = KERNAL,   type = ro;
	ROUTINES: load = KERNAL,   type = ro;
	KERNRAM:  load = KERNAL,   run = KERNRAM, type = ro, define = yes;
	JMPTBL2:  load = JMPTBL2,  type = ro;
	JMPTB128: load = JMPTB128, type = ro;
	JMPTBL:   load = JMPTBL,   type = ro;
	VECTORS:  load = VECTORS,  type = ro;
}
