
TESTDIR = test
SRCDIR  = src
INCDIR  = inc

EMU=../../x16-emulator
EMU_OUT=/Volumes/X16\ DISK

BUILD_DIR    = ../build/x16
CFG_DIR      = $(BUILD_DIR)/cfg
OBJDIR       = $(BUILD_DIR)/codex
CFG_SUBDIR   = cfg

ROM_INCLUDE  = ../inc
KSUP_INCLUDE = ../kernsup

#AS=ca65 -D DEV

AS=ca65

DEV=1

$(OBJDIR)/%.o : $(SRCDIR)/%.s
	@mkdir -p $(OBJDIR)
	$(AS) --include-dir . --listing $(SRCDIR)/$*.l $< -o $@

CX_SRCS = cx.s

CX_DC_SRCS  = cx-dc.s
CX_MII_SRCS = cx-mii.s

UT_SRCS = $(TESTDIR)/utest.s

CX_INCS = \
		 $(INCDIR)/x16_kernal.inc \
       $(INCDIR)/dbgctrl.inc \
	    $(INCDIR)/edit.inc \
	    $(INCDIR)/dispatch.inc \
		 $(INCDIR)/decoder.inc \
		 $(INCDIR)/encode.inc \
	    $(INCDIR)/meta.inc \
	    $(INCDIR)/meta_i.inc

BOOTSTRAP_OBJS = $(OBJDIR)/devrt0.o

PLUGIN_OBJS = $(OBJDIR)/plugin-load.o

CX_OBJS = \
      $(OBJDIR)/bank.o \
      $(OBJDIR)/bank_assy.o \
		$(OBJDIR)/bank_assy_vars.o \
      $(OBJDIR)/dbgctrl.o \
      $(OBJDIR)/decoder.o \
		$(OBJDIR)/decoder_vars.o \
      $(OBJDIR)/dispatch.o \
		$(OBJDIR)/dispatch_vars.o \
      $(OBJDIR)/edit.o \
      $(OBJDIR)/encode.o \
		$(OBJDIR)/encode_vars.o \
	   $(OBJDIR)/fio.o \
      $(OBJDIR)/meta.o \
      $(OBJDIR)/meta_i.o \
      $(OBJDIR)/petsciitoscr.o \
      $(OBJDIR)/screen.o \
		$(OBJDIR)/screen_vars.o \
      $(OBJDIR)/utility.o \
      $(OBJDIR)/vera.o \
		$(OBJDIR)/cx_vars.o

CX_DC_OBJS = \
      $(OBJDIR)/bank.o \
      $(OBJDIR)/bank_assy.o \
		$(OBJDIR)/bank_assy_vars.o \
      $(OBJDIR)/decoder.o \
		$(OBJDIR)/decoder_vars.o \
      $(OBJDIR)/dispatch.o \
		$(OBJDIR)/dispatch_vars.o \
		$(OBJDIR)/encode_vars.o \
	   $(OBJDIR)/fio.o \
      $(OBJDIR)/meta.o \
      $(OBJDIR)/meta_i.o \
      $(OBJDIR)/petsciitoscr.o \
      $(OBJDIR)/screen.o \
		$(OBJDIR)/screen_vars.o \
      $(OBJDIR)/utility.o \
      $(OBJDIR)/vera.o \
		$(OBJDIR)/cx_vars.o

DEV_OBJS = $(BOOTSTRAP_OBJS) $(CX_OBJS)

KSUP_VECS = \
	   $(OBJDIR)/cx_vecs.o \
		$(OBJDIR)/kernsup_cx.o

KSUP_DEFS = -D CPU_65C02=1  -g -D MACHINE_X16=1 --cpu 65SC02

UT_INCS=$(TESTDIR)/assert.s

all: cx  cx-dc cx-mii utest $(BUILD_DIR)/codex.bin

clean:
	rm -f *.o *.l *.sym *.map *.bin
	rm -f $(CX_OBJS)
	rm -f test/*.o test/*.l

cx: $(CX_SRCS) $(CX_INCS) $(DEV_OBJS)
	$(AS) --listing $(SRCDIR)/cx.l cx.s
	ld65 --config $(CFG_SUBDIR)/dev.cfg --mapfile cx.map -Ln cx.sym -o cx cx.o $(DEV_OBJS)
	cp cx $(EMU_OUT)
	./x16_size_record

$(BUILD_DIR)/codex.bin: $(CX_SRCS) $(CX_INCS) $(CX_OBJS) $(KSUP_VECS) $(CFG_DIR)/codex-x16.cfg cx
	ld65 --config $(CFG_DIR)/codex-x16.cfg --mapfile $(BUILD_DIR)/codex.map -Ln $(BUILD_DIR)/codex.sym -o $(BUILD_DIR)/codex.bin cx.o $(CX_OBJS) $(KSUP_VECS)

cx-dc: $(CX_DC_SRCS) $(CX_INCS) $(CX_DC_OBJS) $(PLUGIN_OBJS) $(CFG_SUBDIR)/cx-dc.cfg
	$(AS) --listing $(SRCDIR)/cx-dc.l cx-dc.s
	ld65 --config $(CFG_SUBDIR)/cx-dc.cfg --mapfile cx-dc.map -Ln cx-dc.sym -o cx-dc cx-dc.o $(CX_DC_OBJS) $(PLUGIN_OBJS)
	cp cx-dc $(EMU_OUT)

cx-mii: $(CX_MII_SRCS) $(CX_INCS) $(CX_DC_OBJS) $(PLUGIN_OBJS) $(CFG_SUBDIR)/cx-dc.cfg
	$(AS) --listing $(SRCDIR)/cx-mii.l cx-mii.s
	ld65 --config $(CFG_SUBDIR)/cx-dc.cfg --mapfile cx-mii.map -Ln cx-mii.sym -o cx-mii cx-mii.o $(CX_DC_OBJS) $(PLUGIN_OBJS)
	cp cx-mii $(EMU_OUT)

$(OBJDIR)/kernsup_cx.o : $(SRCDIR)/kernsup_cx.s
	$(AS) --verbose -I $(ROM_INCLUDE) -I $(KSUP_INCLUDE) $(KSUP_DEFS) --listing $(SRCDIR)/kernsupcx.l -o $(OBJDIR)/kernsup_cx.o $(SRCDIR)/kernsup_cx.s

utest: $(UT_SRCS) $(CX_INCS) $(UT_INCS) $(DEV_OBJS) $(CFG_SUBDIR)/utest.cfg
	(cd $(TESTDIR); $(AS) --include-dir .. utest.s -l utest.l)
	ld65 --config $(CFG_SUBDIR)/utest.cfg --mapfile utest.map -o utest $(TESTDIR)/utest.o $(DEV_OBJS)
	cp utest $(EMU_OUT)

